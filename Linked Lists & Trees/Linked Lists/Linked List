public class LinkedList<E> implements LinkedListInterface<E>
{
    LLNode<E> first;
    LLNode<E> last;

    public LinkedList()
    {
        first = last = null;
    }

    public LinkedList(E data)
    {
        LLNode<E> newNode = new LLNode(data);
        first = last = newNode;
    }
    
    public LLNode<E> getFirstNode()
    {
        return first;
    }

	public LLNode<E> getLastNode()
    {
        return last;
    }

	public E getFirst()
    {
        if (first==null)
            return null;
        return first.getData();
    }

	public E getLast()
    {
        if (last==null)
            return null;
        return last.getData();
    }

	public E removeFirst()
    {
        if (first==null)
            return null;
        E firstValue = first.getData();
        if (size()==1)
            first = last = null;
        else
            first = first.getNext();
        return firstValue;
    }

	public E removeLast()
    {
        if (last==null)
            return null;

        if (size()==1)
        {
            E value = last.getData();
            first = last = null;
            return value;
        }

        LLNode<E> secondLastNode = first;
        while (secondLastNode.getNext().getNext()!= null) 
        {
            secondLastNode = secondLastNode.getNext();
        }

        E value = secondLastNode.getNext().getData();
        secondLastNode.setNext(null);
        last = secondLastNode;
        return value;
    }

	public void addFirst(E data)
    {
        if (size()==0)
        {
            LLNode<E> newFirst = new LLNode(data);
            first = last = newFirst;
        }
        else
        {
            LLNode<E> newFirst = new LLNode(data);
            newFirst.setNext(first);
            first = newFirst;
        }
    }

	public void addLast(E data)
    {
        if (size()==0)
        {
            LLNode<E> newLast = new LLNode(data);
            first = last = newLast;
        }
        else
        {
            LLNode<E> newLast = new LLNode(data);
            last.setNext(newLast);
            last = newLast;
        }
    }

	public void clear()
    {
        first = last = null;
    }

	public int size()
    {
        int size = 0;
        if (first==null)
            return size;
        size++;
        LLNode<E> nextNode = first.getNext();
        while (true)
        {
            if (nextNode==null)
                break;
            size++;
            nextNode = nextNode.getNext();
        }
        return size;
    }

	public E get(int x)
    {
        if (first==null || x>size()-1)
            return null;
        LLNode<E> nextNode = first;
        for (int i = 0; i<x; i++)
        {
            nextNode = nextNode.getNext();
        }
        return nextNode.getData();
    }

	public void add(int x, E data)
    {
        if (x<0 || x>size())
            return;
        else if (x==size())
            addLast(data);
        else if (x==0)
            addFirst(data);
        else 
        {
            LLNode<E> newNode = new LLNode(data);
            LLNode<E> previousNode = first;
            for (int i = 0; i < x - 1; i++) 
                previousNode = previousNode.getNext();
            newNode.setNext(previousNode.getNext());
            previousNode.setNext(newNode);
        }
    }

    public E remove(int x)
    {
        if (x>size()-1 || x<0)
            return null;
        if (x==size()-1)
            return removeLast();
        if (x==0)
            return removeFirst();
        
        LLNode<E> previousNode = first;
        for (int i = 0; i <x-1; i++) 
        {
            previousNode = previousNode.getNext();
        }
        LLNode<E> removedNode = previousNode.getNext();
        E removedValue = removedNode.getData();
        previousNode.setNext(removedNode.getNext());
        return removedValue;
    }

	public E set(int x, E data)
    {
        if (first==null || x>size()-1)
            return null;

        LLNode<E> node = first;
        for (int i = 0; i<x; i++)
        {
            node = node.getNext();
        }
        E oldValue = node.getData();
        node.setData(data);
        return oldValue;
    }

	public boolean isEmpty()
    {
        return first==null;
    }

    public String toString()
    {
        if (size()==0)
            return "[]";
        String s = "[";
        for (int i = 0; i<size(); i++)
        {
            if (i==size()-1)
                s = s + get(i) + "]";
            else
                s = s + get(i) + ", ";
        }
        return s;
    }
}
