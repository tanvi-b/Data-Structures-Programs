import java.awt.Point;
import java.util.*;

public class Path
{
    public static String breadthFirstSearch (String[] edges, String vertices, char start, char end)
    {
        MyQueue<String> queue = new MyQueue<>();
        String startString = Character.toString(start);
        queue.offer(startString);

        while (queue.isEmpty()==false)
        {
            String cur = queue.poll();
            char curLetter = cur.charAt(cur.length()-1);
            if (curLetter==end)
                return cur; //shortest path
            for (int i = 0; i<edges.length; i++)
            {
                String edge = edges[i];
                char nextVertice;
                if (edge.indexOf(curLetter)==0)
                    nextVertice = edge.charAt(1);
                else if (edge.indexOf(curLetter)==1)
                    nextVertice = edge.charAt(0);
                else 
                    continue;
                if (cur.indexOf(nextVertice)==-1)
                {
                    String newPath = cur + Character.toString(nextVertice);
                    queue.offer(newPath);
                }
            }
        }
        return null;
    }
}

//create visited string that is appended each time u visit a new vertice
//create queue that stores the paths
//have a cur string

// while (queue.isEmpty()==false)
        // {
        //     String curPath = queue.poll();
        //     char curLetter = cur.charAt(cur.length()-1);
        //     if (curLetter==end)
        //         return curPath; //shortest path
        //     for (int i = 0; i<edges.length; i++)
        //     {
        //         String edge = edges[i];
        //         if (edge.indexOf(curLetter)!=-1 && visited.indexOf(edge.charAt(1))==-1)
        //         {
        //             visited+=Character.toString(edge.charAt(1));
        //         }
        //     }
        // }

// boolean[][] adjacencyMatrix = new boolean[vertices.length()][vertices.length()];
//         for (int i = 0; i<edges.length; i++)
//         {
//             String s = edges[i];
//             char row = s.charAt(0);
//             char column = s.charAt(1);
//             int rowNum = vertices.indexOf(row);
//             int columnNum = vertices.indexOf(column);
//             adjacencyMatrix[rowNum][columnNum] = true;
//             adjacencyMatrix[columnwNum][rowNum] = true;
//         }
